akka {
  loglevel = DEBUG
  stdout-loglevel=OFF
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  http.server = {
    parsing.max-content-length = infinite
    request-timeout = infinite
    idle-timeout = infinite
  }

  persistence{
    journal = {
      plugin = "akka.persistence.journal.leveldb"
      leveldb{
        dir = "target/journal"
        native = off
      }
    }
    snapshot-store{
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = "target/snapshots"
    }
  }
}

http {
  interface = "0.0.0.0"
  interface = ${?HOST}
  port = 9000
  port = ${?PORT}
}

database {
  host = "localhost"
  host = ${?DB_HOST}
  port = 5432
  port = ${?DB_PORT}
  name = "files"
  name = ${?DB_NAME}
  url = "jdbc:postgresql://"${database.host}":"${database.port}"/"${database.name}""
  user = "user"
  user = ${?DB_USER}
  password = "password"
  password = ${?DB_PASSWORD}
  driver = org.postgresql.Driver
  connectionPool = HikariCP
  createIfNotExist = true
  dbSpecificDefaultDB = "postgres"
  dbSpecificDatabaseCreationQuery = "CREATE DATABASE "${database.name}";"
  dbSpecificExistenceCheckQuery = "SELECT datname FROM pg_database WHERE datname = '"${database.name}"';"
}

safeMedia = ["image", "video", "audio", "text"]

fsConfig = {
  adapter = "com.github.gafiatulin.file.LocalFileStorageAdapter"
  filesLocation = "files"
  uploadUrlPrefix = "http://"${http.interface}":"${http.port}"/upload?upload_token="
  hashLength = 16
  askTimeOut = {
    length = 300
    unit = "SECONDS"
  }
}

staticFilesUrlPrefix = "http://"${http.interface}":"${http.port}"/static/"
staticFilesUrlPrefix = ${?URL_PREFIX}